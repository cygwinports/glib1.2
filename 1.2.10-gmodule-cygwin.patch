--- origsrc/glib-1.2.10/configure.in	2008-07-03 10:44:27.812500000 -0500
+++ src/glib-1.2.10/configure.in	2008-07-03 10:50:45.468750000 -0500
@@ -1283,6 +1283,10 @@
 #define GLIB_MAJOR_VERSION $GLIB_MAJOR_VERSION
 #define GLIB_MINOR_VERSION $GLIB_MINOR_VERSION
 #define GLIB_MICRO_VERSION $GLIB_MICRO_VERSION
+
+#define G_OS_UNIX
+#define G_PLATFORM_WIN32
+#define G_WITH_CYGWIN
 "
 
 case "xyes" in
--- origsrc/glib-1.2.10/gmodule/gmodule-cygwin.c	1969-12-31 18:00:00.000000000 -0600
+++ src/glib-1.2.10/gmodule/gmodule-cygwin.c	2008-07-03 16:19:37.734375000 -0500
@@ -0,0 +1,249 @@
+/* GMODULE - GLIB wrapper code for dynamic module loading
+ * Copyright (C) 1998, 2000 Tim Janik
+ *
+ * Win32 GMODULE implementation
+ * Copyright (C) 1998 Tor Lillqvist
+ *
+ * Cygwin GMODULE implementation
+ * Copyright (C) 2007 Yaakov Selkowitz
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+/*
+ * Modified by the GLib Team and others 1997-2007.  See the AUTHORS
+ * file for a list of people on the GLib Team.  See the ChangeLog
+ * files for a list of changes.  These files are distributed with
+ * GLib at ftp://ftp.gtk.org/pub/gtk/.
+ */
+
+/*
+ * MT safe
+ */
+#include "config.h"
+
+#include <dlfcn.h>
+#include <stdio.h>
+#include <string.h>
+#include <windows.h>
+#include <tlhelp32.h>
+
+/* --- win32 functions --- */
+static gpointer
+find_in_any_module_using_toolhelp (const gchar *symbol_name)
+{
+  typedef HANDLE (WINAPI *PFNCREATETOOLHELP32SNAPSHOT)(DWORD, DWORD);
+  static PFNCREATETOOLHELP32SNAPSHOT pfnCreateToolhelp32Snapshot = NULL;
+
+  typedef BOOL (WINAPI *PFNMODULE32FIRST)(HANDLE, MODULEENTRY32*);
+  static PFNMODULE32FIRST pfnModule32First= NULL;
+
+  typedef BOOL (WINAPI *PFNMODULE32NEXT)(HANDLE, MODULEENTRY32*);
+  static PFNMODULE32NEXT pfnModule32Next = NULL;
+
+  static HMODULE kernel32;
+
+  HANDLE snapshot;
+  MODULEENTRY32 me32;
+
+  gpointer p;
+
+  if (!pfnCreateToolhelp32Snapshot || !pfnModule32First || !pfnModule32Next)
+    {
+      if (!kernel32)
+	if (!(kernel32 = GetModuleHandle ("kernel32.dll")))
+	  return NULL;
+
+      if (!(pfnCreateToolhelp32Snapshot = (PFNCREATETOOLHELP32SNAPSHOT) GetProcAddress (kernel32, "CreateToolhelp32Snapshot"))
+	  || !(pfnModule32First = (PFNMODULE32FIRST) GetProcAddress (kernel32, "Module32First"))
+	  || !(pfnModule32Next = (PFNMODULE32NEXT) GetProcAddress (kernel32, "Module32Next")))
+	return NULL;
+    }
+
+  if ((snapshot = (*pfnCreateToolhelp32Snapshot) (TH32CS_SNAPMODULE, 0)) == (HANDLE) -1)
+    return NULL;
+
+  me32.dwSize = sizeof (me32);
+  p = NULL;
+  if ((*pfnModule32First) (snapshot, &me32))
+    {
+      do {
+	if ((p = GetProcAddress (me32.hModule, symbol_name)) != NULL)
+	  break;
+      } while ((*pfnModule32Next) (snapshot, &me32));
+    }
+
+  CloseHandle (snapshot);
+
+  return p;
+}
+
+static gpointer
+find_in_any_module_using_psapi (const gchar *symbol_name)
+{
+  static HMODULE psapi = NULL;
+
+  typedef BOOL (WINAPI *PFNENUMPROCESSMODULES) (HANDLE, HMODULE *, DWORD, LPDWORD) ;
+  static PFNENUMPROCESSMODULES pfnEnumProcessModules = NULL;
+
+  HMODULE *modules;
+  HMODULE dummy;
+  gint i, size;
+  DWORD needed;
+
+  gpointer p;
+
+  if (!pfnEnumProcessModules)
+    {
+      if (!psapi)
+	if ((psapi = LoadLibrary ("psapi.dll")) == NULL)
+	  return NULL;
+
+      if (!(pfnEnumProcessModules = (PFNENUMPROCESSMODULES) GetProcAddress (psapi, "EnumProcessModules")))
+	return NULL;
+    }
+
+  if (!(*pfnEnumProcessModules) (GetCurrentProcess (), &dummy,
+				 sizeof (HMODULE), &needed))
+    return NULL;
+
+  size = needed + 10 * sizeof (HMODULE);
+  modules = g_malloc (size);
+
+  if (!(*pfnEnumProcessModules) (GetCurrentProcess (), modules,
+				 size, &needed)
+      || needed > size)
+    {
+      g_free (modules);
+      return NULL;
+    }
+
+  p = NULL;
+  for (i = 0; i < needed / sizeof (HMODULE); i++)
+    if ((p = GetProcAddress (modules[i], symbol_name)) != NULL)
+      break;
+
+  g_free (modules);
+
+  return p;
+}
+
+static gpointer
+find_in_any_module (const gchar *symbol_name)
+{
+  gpointer result;
+
+  if ((result = find_in_any_module_using_toolhelp (symbol_name)) == NULL
+      && (result = find_in_any_module_using_psapi (symbol_name)) == NULL)
+    return NULL;
+  else
+    return result;
+}
+
+/* --- dl functions --- */
+static gchar*
+fetch_dlerror (gboolean replace_null)
+{
+  gchar *msg = dlerror ();
+
+  /* make sure we always return an error message != NULL, if
+   * expected to do so. */
+
+  if (!msg && replace_null)
+    return "unknown dl-error";
+
+  return msg;
+}
+
+static gpointer
+_g_module_open (const gchar *file_name,
+		gboolean     bind_lazy)
+{
+  gpointer handle;
+  
+  handle = dlopen (file_name, RTLD_GLOBAL | (bind_lazy ? RTLD_LAZY : RTLD_NOW));
+  if (!handle)
+    g_module_set_error (fetch_dlerror (TRUE));
+  
+  return handle;
+}
+
+static gpointer
+_g_module_self (void)
+{
+  gpointer handle;
+  
+  /* to query symbols from the program itself, special link options
+   * are required on some systems.
+   */
+  
+  handle = dlopen (NULL, RTLD_GLOBAL | RTLD_LAZY);
+  if (!handle)
+    g_module_set_error (fetch_dlerror (TRUE));
+  
+  return handle;
+}
+
+static void
+_g_module_close (gpointer handle,
+		 gboolean is_unref)
+{
+  /* are there any systems out there that have dlopen()/dlclose()
+   * without a reference count implementation?
+   */
+  is_unref |= 1;
+  
+  if (is_unref)
+    {
+      if (dlclose (handle) != 0)
+	g_module_set_error (fetch_dlerror (TRUE));
+    }
+}
+
+static gpointer
+_g_module_symbol (gpointer     handle,
+		  const gchar *symbol_name)
+{
+  gpointer p;
+
+  p = dlsym (handle, symbol_name);
+  if (!p)
+	p = find_in_any_module (symbol_name);
+  if (!p)
+    g_module_set_error (fetch_dlerror (FALSE));
+
+  return p;
+}
+
+static gchar*
+_g_module_build_path (const gchar *directory,
+		      const gchar *module_name)
+{
+  if (directory && *directory) {
+    if (strcmp (module_name + strlen (module_name) - 4, ".dll") == 0)
+      return g_strconcat (directory, "/", module_name, NULL);
+    else if (strncmp (module_name, "cyg", 3) == 0)
+      return g_strconcat (directory, "/", module_name, ".dll", NULL);
+    else
+      return g_strconcat (directory, "/cyg", module_name, ".dll", NULL);
+  }
+  else if (strcmp (module_name + strlen (module_name) - 4, ".dll") == 0)
+    return g_strconcat (module_name, NULL);
+  else if (strncmp (module_name, "cyg", 3) == 0)
+    return g_strconcat (module_name, ".dll", NULL);
+  else
+    return g_strconcat ("cyg", module_name, ".dll", NULL);
+}
--- origsrc/glib-1.2.10/gmodule/gmodule.c	2001-03-15 09:33:10.000000000 -0600
+++ src/glib-1.2.10/gmodule/gmodule.c	2008-07-03 10:50:45.500000000 -0500
@@ -127,7 +127,9 @@
 
 /* --- include platform specifc code --- */
 #define	SUPPORT_OR_RETURN(rv)	{ g_module_set_error (NULL); }
-#if	(G_MODULE_IMPL == G_MODULE_IMPL_DL)
+#ifdef __CYGWIN__
+#include "gmodule-cygwin.c"
+#elif	(G_MODULE_IMPL == G_MODULE_IMPL_DL)
 #include "gmodule-dl.c"
 #elif	(G_MODULE_IMPL == G_MODULE_IMPL_DLD)
 #include "gmodule-dld.c"
--- origsrc/glib-1.2.10/gmodule/testgmodule.c	2000-02-19 12:46:06.000000000 -0600
+++ src/glib-1.2.10/gmodule/testgmodule.c	2008-07-03 10:50:45.515625000 -0500
@@ -56,6 +56,9 @@
 #ifdef NATIVE_WIN32
   plugin_a = g_strconcat (string, "\\libgplugin_a.dll", NULL);
   plugin_b = g_strconcat (string, "\\libgplugin_b.dll", NULL);
+#elif defined (__CYGWIN__)
+  plugin_a = g_strconcat (string, "/.libs/", "cyggplugin_a.dll", NULL);
+  plugin_b = g_strconcat (string, "/.libs/", "cyggplugin_b.dll", NULL);
 #elif (G_MODULE_IMPL == G_MODULE_IMPL_DLD)
   plugin_a = g_strconcat (string, "/.libs/", "libgplugin_a.sl", NULL);
   plugin_b = g_strconcat (string, "/.libs/", "libgplugin_b.sl", NULL);
